---
service: thoughtful-app
frameworkVersion: "3"
useDotenv: true
variablesResolutionMode: 20210326
disabledDeprecations:
  - CLI_OPTIONS_SCHEMA
  
provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 6
  logRetentionInDays: 7
  lambdaHashingVersion: 20201221 
  iam:
    role:
      statements: 
        - Effect: Allow
          Action: 
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:ListStreams
            - dynamodb:GetRecords
          Resource: 
            - "Fn::Join": ["", ["arn:aws:dynamodb:" , {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"} , ":table/${self:provider.environment.TABLE_NAME}"] ]
        - Effect: Allow
          Action: 
            - SES:SendEmail
          Resource: '*'
          Condition:
            StringEquals:
              ses:FromAddress:
                - ${env:FROM_EMAIL}

  apiGateway:
    shouldStartNameWithService: true 

  environment:
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_REGION: ${self:provider.region}
    SERVERLESS_STAGE: ${self:provider.stage}

    APP_DIST_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APP_PUBLIC_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APIGATEWAY_URL:
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}
    TABLE_NAME: password_table

plugins:
  - serverless-webpack
  - serverless-plugin-scripts
  - serverless-offline
  - serverless-s3-deploy
  - serverless-dotenv

functions:
  serve:
    handler: server/handler.serve
    events:
      - http:
          path: /
          method: any
          cors: true
      - http:
          path: /{any+}
          method: any
          cors: true

  generate_password:
    handler: server/password_lambda.generate_password
    events:
      - http:
          path: /otp/generate_password
          method: any
          cors: true
    environment:
      DB_TABLE: !Ref DynamodbTable
      TOKEN_LENGTH: 15
      OTP_EXPIRY_MINUTES: 15      

  send_email:
    handler: server/email_lambda.send_email
    dependsOn: DynamodbTable
    events:
      - stream:
          type: dynamodb
          arn: 
            Fn::GetAtt: [DynamodbTable, StreamArn]
          filterPatterns:
            - eventName: [INSERT]
          batchSize: 100
          startingPosition: LATEST
          maximumRetryAttempts: 5
    environment:
      FROM_ADDRESS: ${env:FROM_EMAIL}

  verify_password:
    handler: server/verify_lambda.verify_password
    events:
      - http:
          path: /otp/verify
          method: post
          cors: true
    environment:
      DB_TABLE: !Ref DynamodbTable

custom:
  distBucketUrl:
    us-east-1:
      Fn::Join:
        - ""
        - - https://s3.amazonaws.com/
          - Ref: DistBucket
    default:
      Fn::Join:
        - ""
        - - https://s3-
          - Ref: AWS::Region
          - .amazonaws.com/
          - Ref: DistBucket

  scripts:
    hooks:
      package:initialize: "npm run build:src"
      deploy:finalize: "npx sls s3deploy --stage ${self:provider.stage}"

  webpack:
    webpackConfig: "webpack.server.config.js"

  assets:
    auto: false
    targets:
      - bucket:
          Ref: DistBucket
        acl: public-read
        files:
          - source: dist/
            headers:
              CacheControl: max-age=31104000 # 1 year
            globs:
              - "**/*"

  serverless-offline:
    useChildProcesses: true
    noPrependStageInUrl: true
    httpPort: 3000
    lambdaPort: 3002

resources:
  Transform: AWS::Serverless-2016-10-31
  Resources:

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        MinimumCompressionSize: 1000

    DynamodbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: expiryAt
            AttributeType: N
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: expiryAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TABLE_NAME}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TimeToLiveSpecification:
            AttributeName: expiryAt
            Enabled: True

    DistBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - "GET"
              AllowedOrigins:
                - Fn::Join:
                    - ""
                    - - https://
                      - Ref: ApiGatewayRestApi
                      - .execute-api.
                      - Ref: AWS::Region
                      - .amazonaws.com
              MaxAge: 3000

  Outputs:
    ApiGatewayRestApi:
      Description: API Gateway Endpoint
      Value:
        Ref: ApiGatewayRestApi
    DistBucket:
      Description: Distribution S3 Bucket
      Value:
        Ref: DistBucket