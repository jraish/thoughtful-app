---
service: thoughtful-app
frameworkVersion: "3"
useDotenv: true
variablesResolutionMode: 20210326
disabledDeprecations:
  - CLI_OPTIONS_SCHEMA
  
provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 6
  logRetentionInDays: 7
  lambdaHashingVersion: 20201221 
  iam:
    role:
      statements: 
        - Effect: Allow
          Action: 
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - "Fn::GetAtt": [DynamodbTable, Arn]
        - Effect: Allow
          Action: 
            - SES:SendEmail
          Resource: '*'
          Condition:
            StringEquals:
              ses:FromAddress:
                - ${env:FROM_EMAIL}

  apiGateway:
    shouldStartNameWithService: true 

  environment:
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_REGION: ${self:provider.region}
    SERVERLESS_STAGE: ${self:provider.stage}

    APP_DIST_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APP_PUBLIC_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APIGATEWAY_URL:
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}

plugins:
  - serverless-webpack
  - serverless-plugin-scripts
  - serverless-offline
  - serverless-s3-deploy
  - serverless-dotenv

functions:
  serve:
    handler: handler.serve
    events:
      - http:
          path: /
          method: any
          cors: true
      - http:
          path: /{any+}
          method: any
          cors: true

  generate_password:
    handler: password_lambda.generate_password
    events:
      - http:
          path: /otp/generate_password
          method: any
          cors: true
    environment:
      DB_TABLE: !Ref DynamodbTable
      TOKEN_LENGTH: 15
      OTP_EXPIRY_MINUTES: 15      

  send_email:
    handler: email_lambda.send_email
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DynamodbTable, StreamArn]
          batchSize: 100
          startingPosition: TRIM_HORIZON
    environment:
      FROM_ADDRESS: ${env:FROM_EMAIL}

     # SendEmailFunction:
    #   Type: AWS::Serverless::Function
    #   Properties:
    #     # CodeUri: send-email/
    #     Handler: email_lambda.lambdaHandler
    #     Runtime: nodejs14.x
    #     Environment:
    #       Variables:
    #         FROM_ADDRESS: $FROM_EMAIL
    #     Policies:
    #       - Statement:
    #         - Sid: SendEmailPermission
    #           Effect: Allow
    #           Action:
    #             - SES:SendEmail
    #           Resource: '*'
    #           Condition:
    #             StringEquals:
    #               ses:FromAddress:
    #                 - $FROM_EMAIL
    #     Events:
    #       DynamodbTableStream:
    #         Type: DynamoDB
    #         Properties:
    #           Stream: !GetAtt DynamodbTable.StreamArn
    #           StartingPosition: TRIM_HORIZON
    #           BatchSize: 100

    # VerifyOtpFunction:
    #   Type: AWS::Serverless::Function
    #   Properties:
    #     # CodeUri: verify-otp/
    #     Handler: verify_lambda.lambdaHandler
    #     Runtime: nodejs14.x
    #     Environment:
    #       Variables:
    #         DB_TABLE: !Ref DynamodbTable
    #     Policies:
    #       - Statement:
    #         - Sid: SendEmailPermission
    #           Effect: Allow
    #           Action:
    #             - SES:SendEmail
    #           Resource: '*'
    #           Condition:
    #             StringEquals:
    #               ses:FromAddress:
    #                 - $FROM_EMAIL
    #       - DynamoDBReadPolicy:
    #           TableName: !Ref DynamodbTable
    #     Events:
    #       GenerateUrlApi:
    #         Type: Api
    #         Properties:
    #           Path: /otp/verify
    #           Method: post
    #           RestApiId:
    #             Ref: ApiGatewayRestApi

custom:
  distBucketUrl:
    us-east-1:
      Fn::Join:
        - ""
        - - https://s3.amazonaws.com/
          - Ref: DistBucket
    default:
      Fn::Join:
        - ""
        - - https://s3-
          - Ref: AWS::Region
          - .amazonaws.com/
          - Ref: DistBucket

  scripts:
    hooks:
      package:initialize: "npm run build:src"
      deploy:finalize: "npx sls s3deploy --stage ${self:provider.stage}"

  webpack:
    webpackConfig: "webpack.server.config.js"

  assets:
    auto: false
    targets:
      - bucket:
          Ref: DistBucket
        acl: public-read
        files:
          - source: dist/
            headers:
              CacheControl: max-age=31104000 # 1 year
            globs:
              - "**/*"

  serverless-offline:
    useChildProcesses: true
    noPrependStageInUrl: true
    httpPort: 3000
    lambdaPort: 3002

resources:
  Transform: AWS::Serverless-2016-10-31
  Resources:

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        MinimumCompressionSize: 1000

    DynamodbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: expiryAt
            AttributeType: N
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: expiryAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TimeToLiveSpecification:
            AttributeName: expiryAt
            Enabled: True

    # GenerateOtpFunction:
    #   Type: AWS::Serverless::Function
    #   Properties:
    #     # CodeUri: /
    #     Handler: password_lambda.lambdaHandler
    #     Runtime: nodejs14.x
    #     Environment:
    #       Variables:
    #         DB_TABLE: !Ref DynamodbTable
    #     Policies:
    #       - DynamoDBWritePolicy:
    #           TableName: !Ref DynamodbTable
    #     Events:
    #       GenerateUrlApi:
    #         Type: Api
    #         Properties:
    #           Path: /otp/generate_password
    #           Method: post
    #           RestApiId:
    #             Ref: ApiGatewayApi

    # VerifyOtpFunction:
    #   Type: AWS::Serverless::Function
    #   Properties:
    #     # CodeUri: verify-otp/
    #     Handler: verify_lambda.lambdaHandler
    #     Runtime: nodejs14.x
    #     Environment:
    #       Variables:
    #         DB_TABLE: !Ref DynamodbTable
    #     Policies:
    #       - Statement:
    #         - Sid: SendEmailPermission
    #           Effect: Allow
    #           Action:
    #             - SES:SendEmail
    #           Resource: '*'
    #           Condition:
    #             StringEquals:
    #               ses:FromAddress:
    #                 - $FROM_EMAIL
    #       - DynamoDBReadPolicy:
    #           TableName: !Ref DynamodbTable
    #     Events:
    #       GenerateUrlApi:
    #         Type: Api
    #         Properties:
    #           Path: /otp/verify
    #           Method: post
    #           RestApiId:
    #             Ref: ApiGatewayRestApi

    # SendEmailFunction:
    #   Type: AWS::Serverless::Function
    #   Properties:
    #     # CodeUri: send-email/
    #     Handler: email_lambda.lambdaHandler
    #     Runtime: nodejs14.x
    #     Environment:
    #       Variables:
    #         FROM_ADDRESS: $FROM_EMAIL
    #     Policies:
    #       - Statement:
    #         - Sid: SendEmailPermission
    #           Effect: Allow
    #           Action:
    #             - SES:SendEmail
    #           Resource: '*'
    #           Condition:
    #             StringEquals:
    #               ses:FromAddress:
    #                 - $FROM_EMAIL
    #     Events:
    #       DynamodbTableStream:
    #         Type: DynamoDB
    #         Properties:
    #           Stream: !GetAtt DynamodbTable.StreamArn
    #           StartingPosition: TRIM_HORIZON
    #           BatchSize: 100

    DistBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - "GET"
              AllowedOrigins:
                - Fn::Join:
                    - ""
                    - - https://
                      - Ref: ApiGatewayRestApi
                      - .execute-api.
                      - Ref: AWS::Region
                      - .amazonaws.com
              MaxAge: 3000

  Outputs:
    ApiGatewayRestApi:
      Description: API Gateway Endpoint
      Value:
        Ref: ApiGatewayRestApi
    DistBucket:
      Description: Distribution S3 Bucket
      Value:
        Ref: DistBucket